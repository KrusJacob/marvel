{"version":3,"file":"static/js/673.18815b89.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/randomChar/randomChar.js","components/charList/charList.js","components/charInfo/charInfo.js","components/errorBoundary/ErrorBoundary.js","components/form/Form.js","components/pages/MainPage.js","services/MarvelService.js","hooks/http.hook.js","components/skeleton/skeleton.js","utils/setContent.js"],"sourcesContent":["import img from \"./error.gif\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nconst ErrorMessage = () => {\r\n  const navigate = useNavigate();\r\n  // Обращение к папке public\r\n  //   return <img src={process.env.PUBLIC_URL + \"/error.gif\"} />;\r\n  return (\r\n    <>\r\n      <img\r\n        style={{ display: \"block\", width: \"250px\", height: \"250px\", objectFit: \"contain\", margin: \"0 auto\" }}\r\n        src={img}\r\n        alt=\"Error\"\r\n      />\r\n      {/* <button\r\n        style={{\r\n          display: \"block\",\r\n          textAlign: \"center\",\r\n          fontWeight: \"bold\",\r\n          fontSize: \"24px\",\r\n          margin: \"30px auto\",\r\n          padding: \"5px\",\r\n          border: \"1px solid #000\",\r\n          width: \"max-content\",\r\n          cursor: \"pointer\",\r\n        }}\r\n        onClick={() => navigate(-1)}\r\n      >\r\n        Go Back\r\n      </button> */}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ErrorMessage;\r\n","import { useState, useEffect } from \"react\";\r\nimport { CSSTransition } from \"react-transition-group\";\r\n\r\nimport useMarvelService from \"../../services/MarvelService\";\r\nimport setContent from \"../../utils/setContent\";\r\n\r\nimport \"./randomChar.scss\";\r\n\r\nimport mjolnir from \"../../resources/img/mjolnir.png\";\r\n\r\nconst RandomChar = () => {\r\n  const [char, setChar] = useState({});\r\n  const { getCharacter, clearError, process, setProcess } = useMarvelService();\r\n  const [show, setShow] = useState();\r\n\r\n  useEffect(() => {\r\n    updateChar();\r\n  }, []);\r\n\r\n  const onCharLoaded = (char) => {\r\n    setChar(char);\r\n    setShow(true);\r\n  };\r\n\r\n  const updateChar = () => {\r\n    setShow(false);\r\n    clearError();\r\n    const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\r\n\r\n    getCharacter(id)\r\n      .then(onCharLoaded)\r\n      .then(() => setProcess(\"confirmed\"));\r\n  };\r\n\r\n  return (\r\n    <div className=\"randomchar\">\r\n      <CSSTransition in={show} timeout={400} classNames=\"randomchar__block\">\r\n        {setContent(process, View, char)}\r\n      </CSSTransition>\r\n      <div className=\"randomchar__static\">\r\n        <p className=\"randomchar__title\">\r\n          Random character for today! <br />\r\n          Do you want to get to know him better?\r\n        </p>\r\n        <p className=\"randomchar__title\">Or choose another one</p>\r\n        <div>\r\n          <button className=\"btn btn__main\">\r\n            <div className=\"inner\" onClick={updateChar}>\r\n              try it\r\n            </div>\r\n          </button>\r\n        </div>\r\n        <img src={mjolnir} alt=\"mjolnir\" />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst View = ({ data }) => {\r\n  const { name, description, thumbnail, homepage, wiki } = data;\r\n\r\n  let imgStyle = { objectFit: \"cover\" };\r\n  if (thumbnail === \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\") {\r\n    imgStyle = { objectFit: \"unset\" };\r\n  }\r\n\r\n  return (\r\n    <div className=\"randomchar__block\">\r\n      <img src={thumbnail} alt=\"thor\" className=\"randomchar__img\" style={imgStyle} />\r\n      <div className=\"randomchar__info\">\r\n        <p className=\"randomchar__name\">{name}</p>\r\n        <p className=\"randomchar__descr\">{description}</p>\r\n        <div className=\"randomchar__btns\">\r\n          <a href={homepage} className=\"btn btn__main\">\r\n            <div className=\"inner\">HOMEPAGE</div>\r\n          </a>\r\n          <a href={wiki} className=\"btn btn__secondary\">\r\n            <div className=\"inner\">WIKI</div>\r\n          </a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RandomChar;\r\n","import { useState, useEffect, useRef, useMemo } from \"react\";\r\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\r\nimport PropTypes from \"prop-types\"; //\r\n\r\nimport Spinner from \"../spinner/Spinner\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\nimport useMarvelService from \"../../services/MarvelService\";\r\n// import setContent from \"../../utils/setContent\";\r\n\r\nimport \"./charList.scss\";\r\n\r\nconst setContent = (process, Component, newItemLoading) => {\r\n  switch (process) {\r\n    case \"waiting\":\r\n      return <Spinner />;\r\n    case \"loading\":\r\n      return newItemLoading ? <Component /> : <Spinner />;\r\n    case \"confirmed\":\r\n      return <Component />;\r\n    case \"error\":\r\n      return <ErrorMessage />;\r\n    default:\r\n      throw new Error(\"Unexpected process state\");\r\n  }\r\n};\r\n\r\nconst CharList = (props) => {\r\n  const [charList, setCharList] = useState([]);\r\n  const [newItemLoading, setNewItemLoading] = useState(false);\r\n  const [offset, setOffset] = useState(79);\r\n  const [charEnded, setCharEnded] = useState(false);\r\n\r\n  const { getAllCharacters, process, setProcess } = useMarvelService();\r\n\r\n  useEffect(() => {\r\n    onRequest(offset, true);\r\n  }, []);\r\n\r\n  const onRequest = (offset, initial) => {\r\n    initial ? setNewItemLoading(false) : setNewItemLoading(true);\r\n\r\n    getAllCharacters(offset)\r\n      .then(onCharListLoaded)\r\n      .then(() => setProcess(\"confirmed\"));\r\n  };\r\n\r\n  const onCharListLoaded = (newCharList) => {\r\n    let ended = false;\r\n    if (newCharList.length < 9) {\r\n      ended = true;\r\n    }\r\n\r\n    setCharList((charList) => [...charList, ...newCharList]);\r\n    setNewItemLoading(false);\r\n    setOffset((offset) => offset + 9);\r\n    setCharEnded(ended);\r\n  };\r\n\r\n  const arrItems = useRef([]);\r\n\r\n  const onSelectItem = (index) => {\r\n    arrItems.current.forEach((item) => {\r\n      item.classList.remove(\"selected\");\r\n    });\r\n\r\n    arrItems.current[index].classList.add(\"selected\");\r\n    arrItems.current[index].focus();\r\n  };\r\n\r\n  function renderItems(arr) {\r\n    const items = arr.map((item, index) => {\r\n      let imgStyle = { objectFit: \"cover\" };\r\n      if (item.thumbnail === \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\") {\r\n        imgStyle = { objectFit: \"unset\" };\r\n      }\r\n\r\n      return (\r\n        <CSSTransition key={item.id} timeout={500} classNames=\"char__item\">\r\n          <li\r\n            tabIndex={0}\r\n            ref={(el) => (arrItems.current[index] = el)}\r\n            className=\"char__item\"\r\n            onClick={() => {\r\n              props.onCharSelected(item.id);\r\n              onSelectItem(index);\r\n            }}\r\n            onFocus={() => {\r\n              props.onCharSelected(item.id);\r\n              onSelectItem(index);\r\n            }}\r\n          >\r\n            <img src={item.thumbnail} alt={item.name} style={imgStyle} />\r\n            <div className=\"char__name\">{item.name}</div>\r\n          </li>\r\n        </CSSTransition>\r\n      );\r\n    });\r\n    return (\r\n      <ul className=\"char__grid\">\r\n        <TransitionGroup component={null}>{items}</TransitionGroup>\r\n      </ul>\r\n    );\r\n  }\r\n\r\n  const elements = useMemo(() => {\r\n    return setContent(process, () => renderItems(charList), newItemLoading);\r\n  }, [process]);\r\n\r\n  return (\r\n    <div className=\"char__list\">\r\n      {elements}\r\n\r\n      <button\r\n        className=\"btn btn__main btn__long\"\r\n        disabled={newItemLoading}\r\n        style={{ display: charEnded ? \"none\" : \"block\" }}\r\n        onClick={() => onRequest(offset)}\r\n      >\r\n        <div className=\"inner\">LOAD MORE</div>\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nCharList.propTypes = {\r\n  onCharSelected: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default CharList;\r\n","import { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\"; //\r\n\r\nimport \"./charInfo.scss\";\r\n\r\nimport useMarvelService from \"../../services/MarvelService\";\r\nimport setContent from \"../../utils/setContent\";\r\n\r\nconst CharInfo = (props) => {\r\n  const [char, setChar] = useState(null);\r\n\r\n  const { getCharacter, clearError, process, setProcess } = useMarvelService();\r\n\r\n  const updateChar = () => {\r\n    const { charId } = props;\r\n    if (!charId) {\r\n      return;\r\n    }\r\n\r\n    clearError();\r\n    getCharacter(charId)\r\n      .then(onCharLoaded)\r\n      .then(() => setProcess(\"confirmed\"));\r\n  };\r\n\r\n  useEffect(() => {\r\n    updateChar();\r\n  }, [props.charId]);\r\n\r\n  const onCharLoaded = (char) => {\r\n    setChar(char);\r\n  };\r\n\r\n  // const skeleton = char || loading || error ? null : <Skeleton />;\r\n  // const errorMessage = error ? <ErrorMessage /> : null;\r\n  // const spinner = loading ? <Spinner /> : null;\r\n  // const content = !(loading || error || !char) ? <View char={char} /> : null;\r\n\r\n  return <div className=\"char__info\">{setContent(process, View, char)}</div>;\r\n};\r\n\r\nconst View = ({ data }) => {\r\n  const { name, description, thumbnail, homepage, wiki, comics } = data;\r\n  let imgStyle = { objectFit: \"cover\" };\r\n  if (thumbnail === \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\") {\r\n    imgStyle = { objectFit: \"unset\" };\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"char__basics\">\r\n        <img src={thumbnail} alt={name} style={imgStyle} />\r\n        <div>\r\n          <p className=\"char__basics-name\">{name}</p>\r\n          <div className=\"char__btns\">\r\n            <a href={homepage} className=\"btn btn__main\">\r\n              <div className=\"inner\">HOMEPAGE</div>\r\n            </a>\r\n            <a href={wiki} className=\"btn btn__secondary\">\r\n              <div className=\"inner\">WIKI</div>\r\n            </a>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"char__descr\">{description}</div>\r\n      <div className=\"char__comics\">Comics:</div>\r\n      <ul className=\"char__comics-list\">\r\n        {comics.length > 0 ? null : \"Comics not found\"}\r\n        {comics.map((item, i) => {\r\n          // eslint-disable-next-line\r\n          if (i > 10) {\r\n            return;\r\n          }\r\n\r\n          return (\r\n            <li key={i} className=\"char__comics-item\">\r\n              <Link to={`/comics/${item.resourceURI.split(\"/\").pop()}`}>{item.name}</Link>\r\n            </li>\r\n          );\r\n        })}\r\n      </ul>\r\n    </>\r\n  );\r\n};\r\n\r\nCharInfo.propTypes = {\r\n  charId: PropTypes.number,\r\n};\r\n\r\nexport default CharInfo;\r\n","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n  state = {\r\n    error: false,\r\n  };\r\n\r\n  componentDidCatch(error, errorInfo) {\r\n    console.log(error, errorInfo);\r\n    this.setState({\r\n      error: true,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.error) {\r\n      return <ErrorMessage></ErrorMessage>;\r\n    }\r\n\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import { useState } from \"react\";\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from \"formik\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport \"./form.scss\";\r\n\r\nimport useMarvelService from \"../../services/MarvelService\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nconst validate = (values) => {\r\n  const errors = {};\r\n\r\n  if (!values.name) {\r\n    errors.name = \"This field is required\";\r\n  }\r\n\r\n  return errors;\r\n};\r\n\r\nconst CharForm = () => {\r\n  const [char, setChar] = useState(null);\r\n  const { getCharacterByName, clearError, process, setProcess } = useMarvelService();\r\n\r\n  const onCharLoaded = (char) => {\r\n    setChar(char);\r\n  };\r\n\r\n  const updateChar = (char) => {\r\n    clearError();\r\n\r\n    getCharacterByName(char)\r\n      .then(onCharLoaded)\r\n      .then(() => setProcess(\"confirmed\"));\r\n  };\r\n\r\n  const errorMessage = process === \"error\" ? <ErrorMessage /> : null;\r\n  const results = !char ? null : char.length > 0 ? (\r\n    <SuccesFound char={char} />\r\n  ) : (\r\n    <div className=\"search search-error\">The character was not found. Check the name and try again</div>\r\n  );\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={{\r\n        name: \"\",\r\n      }}\r\n      validate={validate}\r\n      onSubmit={(value) => {\r\n        updateChar(value.name);\r\n      }}\r\n    >\r\n      <Form className=\"form\" onChange={(e) => (!e.target.value ? setChar(null) : null)}>\r\n        <label htmlFor=\"name\">Or find a character by name:</label>\r\n        <div className=\"input\">\r\n          <Field placeholder=\"Enter name\" name=\"name\" type=\"text\" />\r\n\r\n          <button disabled={process === \"loading\"} className=\"btn btn__main\" type=\"submit\">\r\n            <div className=\"inner\">FIND</div>\r\n          </button>\r\n          {results}\r\n          {errorMessage}\r\n          <FormikErrorMessage className=\"search search-error\" name=\"name\" component=\"div\" />\r\n        </div>\r\n      </Form>\r\n    </Formik>\r\n  );\r\n};\r\n\r\nconst SuccesFound = (props) => {\r\n  return (\r\n    <>\r\n      <div className=\"search search-success\">There is! Visit {props.char[0].name} page?</div>\r\n      <Link to={`/marvel/characters/${props.char[0].id}`} className=\"btn btn__secondary\">\r\n        <div className=\"inner\">To page</div>\r\n      </Link>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CharForm;\r\n","import { useState } from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nimport RandomChar from \"../randomChar/randomChar\";\r\nimport CharList from \"../charList/charList\";\r\nimport CharInfo from \"../charInfo/charInfo\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\nimport CharForm from \"../form/Form\";\r\n\r\nimport vision from \"../../resources/img/vision.png\";\r\n\r\nconst MainPage = () => {\r\n  const [selectedChar, setChar] = useState(null);\r\n\r\n  const onCharSelected = (id) => {\r\n    setChar(id);\r\n  };\r\n\r\n  console.log(\"main\");\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <meta name=\"description\" content=\"Marvel information\" />\r\n        <title>Marvel information portal</title>\r\n      </Helmet>\r\n      <ErrorBoundary>\r\n        <RandomChar />\r\n      </ErrorBoundary>\r\n      <div className=\"char__content\">\r\n        <ErrorBoundary>\r\n          <CharList onCharSelected={onCharSelected} />\r\n        </ErrorBoundary>\r\n        <div>\r\n          <ErrorBoundary>\r\n            <CharInfo charId={selectedChar} />\r\n          </ErrorBoundary>\r\n          <ErrorBoundary>\r\n            <CharForm />\r\n          </ErrorBoundary>\r\n        </div>\r\n      </div>\r\n      <img className=\"bg-decoration\" src={vision} alt=\"vision\" />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MainPage;\r\n","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n  const { request, clearError, process, setProcess } = useHttp();\r\n\r\n  const _apiBase = \"https://gateway.marvel.com:443/v1/public/\";\r\n  const _apiKey = \"apikey=0441b6176dfb307f18bba5c5f9ee903e\";\r\n  const _OffsetChars = 79;\r\n  const _OffestComics = 100;\r\n\r\n  // getResource = async (url) => {\r\n  //   let res = await fetch(url);\r\n\r\n  //   if (!res.ok) {\r\n  //     throw new Error(`Could not fetch ${url}, status: ${res.status}`);\r\n  //   }\r\n\r\n  //   return await res.json();\r\n  // };\r\n\r\n  const getCharacterByName = async (name) => {\r\n    const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n    return res.data.results.map(_transformCharacter);\r\n  };\r\n\r\n  const getAllCharacters = async (offset = _OffsetChars) => {\r\n    const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n    return res.data.results.map(_transformCharacter);\r\n  };\r\n\r\n  const getCharacter = async (id) => {\r\n    const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n\r\n    return _transformCharacter(res.data.results[0]);\r\n  };\r\n\r\n  const getAllComics = async (offset = _OffestComics) => {\r\n    const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\r\n    return res.data.results.map(_transformComics);\r\n  };\r\n\r\n  const getComic = async (id) => {\r\n    const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n    return _transformComics(res.data.results[0]);\r\n  };\r\n\r\n  // checkData = (data) => {\r\n  //   if (data) {\r\n  //     console.log(data);\r\n  //     console.log(data.length);\r\n  //     return data;\r\n  //   } else {\r\n  //     return \"There is no description for this character\";\r\n  //   }\r\n  // };\r\n\r\n  const _transformCharacter = (char) => {\r\n    return {\r\n      id: char.id,\r\n      name: char.name,\r\n      description: char.description\r\n        ? `${char.description.slice(0, 210)}...`\r\n        : \"There is no description for this character\",\r\n      thumbnail: char.thumbnail.path + \".\" + char.thumbnail.extension,\r\n      homepage: char.urls[0].url,\r\n      wiki: char.urls[1].url,\r\n      comics: char.comics.items,\r\n    };\r\n  };\r\n\r\n  const _transformComics = (comics) => {\r\n    return {\r\n      id: comics.id,\r\n      title: comics.title,\r\n      description: comics.description ? comics.description : \"Description not found\",\r\n      pages: comics.pageCount,\r\n      thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n      language: comics.textObjects.language || \"en-us\",\r\n      price: comics.prices[0].price ? comics.prices[0].price + \"$\" : \"NOT AVAILABLE\",\r\n    };\r\n  };\r\n\r\n  return {\r\n    process,\r\n    setProcess,\r\n    getCharacterByName,\r\n    getAllCharacters,\r\n    getCharacter,\r\n    getAllComics,\r\n    getComic,\r\n    clearError,\r\n  };\r\n};\r\n\r\nexport default useMarvelService;\r\n","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n  const [process, setProcess] = useState(\"waiting\");\r\n\r\n  const request = useCallback(\r\n    async (url, method = \"GET\", body = null, headers = { \"Content-Type\": \"application/json\" }) => {\r\n      setProcess(\"loading\");\r\n      try {\r\n        const response = await fetch(url, { method, body, headers });\r\n\r\n        if (!response.ok) {\r\n          throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n        }\r\n        const data = await response.json();\r\n\r\n        return data;\r\n      } catch (e) {\r\n        setProcess(\"error\");\r\n        throw e;\r\n      }\r\n    },\r\n    []\r\n  );\r\n\r\n  const clearError = useCallback(() => {\r\n    setProcess(\"loading\");\r\n  }, []);\r\n\r\n  return { request, clearError, process, setProcess };\r\n};\r\n","import \"./skeleton.scss\";\r\n\r\nconst Skeleton = () => {\r\n  return (\r\n    <div className=\"skeleton\">\r\n      <p className=\"char__select\">Please select a character to see information</p>\r\n      <div className=\"pulse skeleton__header\">\r\n        <div className=\"skeleton__circle\"></div>\r\n        <div className=\"skeleton__mini\"></div>\r\n      </div>\r\n      <div className=\"pulse skeleton__block\"></div>\r\n      <div className=\"pulse skeleton__block\"></div>\r\n      <div className=\"pulse skeleton__block\"></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Skeleton;\r\n","import Spinner from \"../components/spinner/Spinner\";\r\nimport ErrorMessage from \"../components/errorMessage/ErrorMessage\";\r\nimport Skeleton from \"../components/skeleton/skeleton\";\r\n\r\nconst setContent = (process, Component, data) => {\r\n  switch (process) {\r\n    case \"waiting\":\r\n      return <Skeleton />;\r\n    case \"loading\":\r\n      return <Spinner />;\r\n    case \"confirmed\":\r\n      return <Component data={data} />;\r\n    case \"error\":\r\n      return <ErrorMessage />;\r\n    default:\r\n      throw new Error(\"Unexpected process state\");\r\n  }\r\n};\r\n\r\nexport default setContent;\r\n"],"names":["useNavigate","style","display","width","height","objectFit","margin","src","img","alt","View","data","name","description","thumbnail","homepage","wiki","imgStyle","className","href","useState","char","setChar","useMarvelService","getCharacter","clearError","process","setProcess","show","setShow","useEffect","updateChar","onCharLoaded","id","Math","floor","random","then","CSSTransition","in","timeout","classNames","setContent","onClick","mjolnir","props","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","length","arrItems","useRef","onSelectItem","index","current","forEach","item","classList","remove","add","focus","elements","useMemo","Component","Spinner","ErrorMessage","Error","arr","items","map","tabIndex","ref","el","onCharSelected","onFocus","TransitionGroup","component","renderItems","disabled","comics","i","to","resourceURI","split","pop","charId","ErrorBoundary","state","error","errorInfo","console","log","this","setState","children","validate","values","errors","SuccesFound","getCharacterByName","errorMessage","results","initialValues","onSubmit","value","onChange","e","target","htmlFor","placeholder","type","selectedChar","Helmet","content","vision","request","useCallback","url","method","body","headers","fetch","response","ok","status","json","useHttp","_apiBase","_apiKey","res","_transformCharacter","getAllComics","_transformComics","getComic","slice","path","extension","urls","title","pages","pageCount","language","textObjects","price","prices"],"sourceRoot":""}